#
# @lc app=leetcode.cn id=200 lang=python3
#
# [200] 岛屿数量
#
from typing import List
# @lc code=start
from queue import Queue


class Solution:
    @staticmethod
    def markIsland(i, j, grid: List[List[str]]):
        m, n = len(grid), len(grid[0])
        q = Queue()
        grid[i][j] = 0
        q.put((i, j))
        while q.qsize():
            i, j = q.get()
            for x, y in ((i+1, j), (i, j+1), (i-1, j), (i, j-1)):
                if 0 <= x < m and 0 <= y < n:
                    if grid[x][y] == '1':
                        grid[x][y] = 0
                        q.put((x, y))

    def numIslands(self, grid: List[List[str]]) -> int:
        if len(grid) == 0:
            return 0
        m, n = len(grid), len(grid[0])
        cnt = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    cnt += 1
                    Solution.markIsland(i, j, grid)
        return cnt


# @lc code=end


def cvt(s):
    return [list(i) for i in s.split()]


assert Solution().numIslands(cvt('''11110
11010
11000
00000''')) == 1
assert Solution().numIslands(cvt(
    '''11000
11000
00100
00011''')) == 3
assert Solution().numIslands(
    [
        ["1", "1", "1", "1", "1", "0", "1", "1", "1", "1",
            "1", "1", "1", "1", "1", "0", "1", "0", "1", "1"],
        ["0", "1", "1", "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "1", "0", "1", "1", "1", "1", "1", "0"],
        ["1", "0", "1", "1", "1", "0", "0", "1", "1", "0",
            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "0", "1", "1", "1", "1", "1",
            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "0", "0", "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "0", "1", "1", "1", "1", "1", "1", "0", "1",
            "1", "1", "0", "1", "1", "1", "0", "1", "1", "1"],
        ["0", "1", "1", "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "0", "1", "1", "0", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "0", "1", "1", "1", "1", "0", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
            "0", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["0", "1", "1", "1", "1", "1", "1", "1", "0", "1",
            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "0", "1", "1", "1", "1",
            "1", "1", "1", "0", "1", "1", "1", "1", "1", "1"],
        ["1", "0", "1", "1", "1", "1", "1", "0", "1", "1",
            "1", "0", "1", "1", "1", "1", "0", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "0", "1", "1", "1", "1", "1", "1", "0"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "1", "0", "1", "1", "1", "1", "0", "0"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"]
    ]) == 1
assert Solution().numIslands([]) == 0
